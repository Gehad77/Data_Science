{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3, 6, 9]\n"
     ]
    }
   ],
   "source": [
    "v1 = [1, 2, 4]\n",
    "v2 = [2, 4, 5]\n",
    "result = []\n",
    "if len(v1) != len(v2):\n",
    "    print(\"Not Equal in Length\")\n",
    "else :\n",
    "    for i in range (len(v1)):\n",
    "       x= v1[i] + v2[i]\n",
    "       result.append(x)\n",
    "\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1, -2, -1]\n"
     ]
    }
   ],
   "source": [
    "v1 = [1, 2, 4]\n",
    "v2 = [2, 4, 5]\n",
    "result = []\n",
    "if len(v1) != len(v2):\n",
    "    print(\"Not Equal in Length\")\n",
    "else :\n",
    "    for i in range (len(v1)):\n",
    "       x= v1[i] - v2[i]\n",
    "       result.append(x)\n",
    "\n",
    "print(result)"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5, 10, 20]\n"
     ]
    }
   ],
   "source": [
    "v1 = [1, 2, 4]\n",
    "scaler = 5\n",
    "result = []\n",
    "\n",
    "for i in range (len(v1)):\n",
    "    x= v1[i] * scaler\n",
    "    result.append(x)\n",
    "\n",
    "print(result)"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "outputs": [
    {
     "data": {
      "text/plain": "30"
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v1 = [1, 2, 4]\n",
    "v2 = [2, 4, 5]\n",
    "result = []\n",
    "if len(v1) != len(v2):\n",
    "    print(\"Not Equal in Length\")\n",
    "else :\n",
    "    for i in range (len(v1)):\n",
    "       x= v1[i] * v2[i]\n",
    "       result.append(x)\n",
    "sum(result)\n",
    "# print(result)"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "outputs": [
    {
     "data": {
      "text/plain": "30"
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v1 = [1, 2, 4]\n",
    "v2 = [2, 4, 5]\n",
    "result = []\n",
    "if len(v1) != len(v2):\n",
    "    print(\"Not Equal in Length\")\n",
    "else :\n",
    "    for i in range (len(v1)):\n",
    "       x= v1[i] * v2[i]\n",
    "       result.append(x)\n",
    "sum(result)\n",
    "# print(result)"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "outputs": [
    {
     "data": {
      "text/plain": "[3, 6, 9]"
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[m+n for m,n in zip(v1,v2) ]"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 x 3\n"
     ]
    }
   ],
   "source": [
    "matrix1 = [[1, 7, 3], [1, 4, 5]]\n",
    "rows = len(matrix1)\n",
    "coulmns = len(matrix1[0])\n",
    "print(rows,\"x\", coulmns)\n",
    "\n"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "outputs": [
    {
     "data": {
      "text/plain": "[[2, 12, 5], [6, 7, 11]]"
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix1 = [[1, 7, 3], [1, 4, 5]]\n",
    "matrix2 = [[1,5,2], [5,3,6]]\n",
    "rows1 = len(matrix1)\n",
    "columns_1 = len(matrix1[0])\n",
    "rows2 = len(matrix2)\n",
    "columns_2 = len(matrix2[0])\n",
    "result = [[],[]]\n",
    "choose_op = input(\"Enter Operation (+,-,*,/)\")\n",
    "\n",
    "if choose_op == \"+\" :\n",
    "    for i in range (len(matrix1)):\n",
    "        for m in range(len(matrix1[0])):\n",
    "            k = matrix1[i][m] + matrix2[i][m]\n",
    "            result[i].append(k)\n",
    "\n",
    "if choose_op == \"-\" :\n",
    "    for i in range (len(matrix1)):\n",
    "        for m in range(len(matrix1[0])):\n",
    "            k = matrix1[i][m] - matrix2[i][m]\n",
    "            result[i].append(k)\n",
    "\n",
    "if choose_op == \"*\" :\n",
    "    for i in range (len(matrix1)):\n",
    "        for m in range(len(matrix1[0])):\n",
    "            k = matrix1[i][m] * matrix2[i][m]\n",
    "            result[i].append(k)\n",
    "\n",
    "if choose_op == \"/\" :\n",
    "    for i in range (len(matrix1)):\n",
    "        for m in range(len(matrix1[0])):\n",
    "            k = int(matrix1[i][m]) / int(matrix2[i][m])\n",
    "            result[i].append(k)\n",
    "\n",
    "result\n"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [],
   "source": [
    "def dot_pord(v1,v2):\n",
    "    res = 0\n",
    "    for i in range  (len(v1)):\n",
    "        res += v1[i]*v2[i]\n",
    "    return res"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Numpy's answer : [[51 47]\n",
      " [46 52]]\n",
      "my answer : [[51, 47], [46, 52]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "matrix1 = [[1, 7, 3],\n",
    "           [1,4,5]]\n",
    "matrix2 = [[1,5],\n",
    "           [5,3],\n",
    "           [5,7]]\n",
    "if len(matrix2) == len(matrix1[0]):\n",
    "    result = []\n",
    "    for ind_of_row_m1 in range (len(matrix1)): # iterate on the rows of matrix 1\n",
    "        r= []\n",
    "        for ind_of_col_m2 in range (len(matrix2[0])):  # iterate on the rows of matrix 2\n",
    "            v = []\n",
    "            for ind_of_row_m2 in range(len(matrix2)):  # iterate on the rows of matrix 2\n",
    "                v.append(matrix2[ind_of_row_m2][ind_of_col_m2]) # take each element in the columns of matrix2 and insert in a list as vector\n",
    "            r.append(dot_pord(matrix1[ind_of_row_m1], v)) # get the vector dot product of the indexed row in matrix 1 and the column element in matrix 2\n",
    "        result.append(r) # append it in the return matrix list\n",
    "\n",
    "print(f\"Numpy's answer : {np.dot(matrix1, matrix2)}\")\n",
    "print(f\"my answer : {result}\")"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
